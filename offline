#! /usr/bin/python3
# Simple script to save typos and other frustrations for offline wallets.
import argparse
import json
import os
import platform
import readline
import subprocess
import sys
import time

DEBS_AMD64={
    'bitcoind_0.12.1-xenial1_amd64.deb':'3991ff69a769a2caff345af97e7f2e23b15ab883a57c9105d019b18fbc27dd59',
    'libboost-chrono1.58.0_1.58.0+dfsg-5ubuntu3_amd64.deb':'756f961b8e30cda2e55f275dc34c5f519ce41e0f48e105d305b7f70bd22a8160',
    'libboost-program-options1.58.0_1.58.0+dfsg-5ubuntu3_amd64.deb':'445572e209e156429135f33274e0024bb63d8289acee21602655ef210a8563e8',
    'libboost-thread1.58.0_1.58.0+dfsg-5ubuntu3_amd64.deb':'b0b07b33690e8b65019298ad1fd847b5b6a536c69c717bd4fee5a0ad51587eed',
    'libdb4.8++_4.8.30-xenial2_amd64.deb':'b2dc543aa1e950cedf17b2e2a64e66f48a1da58d0efee766dee03fff17150d24',
    'libevent-core-2.0-5_2.0.21-stable-2_amd64.deb':'101c8c4a1d6e05ddea8c63220a3d06ea1e179b3ac331d6c47d61c28b1e004af7',
    'libevent-pthreads-2.0-5_2.0.21-stable-2_amd64.deb':'706beab6ce8d36d8c9b3892e39632fc3906c0c9c1974c970e62fb4d0f57c6d39',
    'libssl1.0.0_1.0.2g-1ubuntu4.1_amd64.deb':'0b693736fb3799c6d982ed57a8ee764334171bc57a73f7ead3c22c7d10e8872e',
    'qrencode_3.4.4-1_amd64.deb':'ca0d5f659685c564eeff01b66d502152288f7e0b84e45934e2b603e4999d3d07',
    'libqrencode3_3.4.4-1_amd64.deb':'7009fa11f64236628dfbb5d247b21b157777712ad938e50e2e01ebf9696a6acd'
}
DEBS_X86={
    'bitcoind_0.12.1-xenial1_i386.deb':'2db08cb35d81e7d78fe53a561dfbbf3d24b6da328e3de8ef7d8d346d9b4f4158',
    'libboost-chrono1.58.0_1.58.0+dfsg-5ubuntu3_i386.deb':'226f7371f3c9817a94adca2a41a962fc369889790f3c272173be51586c4ec803',
    'libboost-program-options1.58.0_1.58.0+dfsg-5ubuntu3_i386.deb':'11a304f7a2b3b862835a45245fffd3262624475c9b82dbd9f4b6912ed22e89ba',
    'libboost-thread1.58.0_1.58.0+dfsg-5ubuntu3_i386.deb':'9dbf083301c7b47d86d6bfef933469e59bf99dc58d40065007f8a8fecbc8f813',
    'libdb4.8++_4.8.30-xenial2_i386.deb':'5e504e81a5e6877cd9c030840fd80181aada112ff31bd5a5035d993331ba7d7b',
    'libevent-core-2.0-5_2.0.21-stable-2_i386.deb':'2aaa15157a1cd66ef8df6a7c15e786ab39973502b3e280b115722162c2146fd1',
    'libevent-pthreads-2.0-5_2.0.21-stable-2_i386.deb':'987479fa2419990fc53e116f50304b6a473f9cce186c9d231bc7599bb1c1b326',
    'libqrencode3_3.4.4-1_i386.deb':'89ff4ca9bdb258b99ce3ef20675005473ea6e36d5c67914167301d85e54e4010',
    'libssl1.0.0_1.0.2g-1ubuntu4.1_i386.deb':'fab6ce738a4c80a876dcce43d2f270ec601eebab054959fa0abbc6f5a69be43b',
    'qrencode_3.4.4-1_i386.deb':'80b702112fbba82215c36cf8a2bde70c52c6d86fad294e9df268814f3c84a992'
}

def prefilled_input(prompt, text):
    def prefill_hook():
        if text is not None:
            readline.insert_text(text)
            readline.redisplay()

    readline.set_pre_input_hook(prefill_hook)
    result = input(prompt)
    readline.set_pre_input_hook()
    return result

def check_ubuntu():
    if platform.machine() == 'x86_64':
        size=1485881344
        cdrom='4bcec83ef856c50c6866f3b0f3942e011104b5ecc6d955d1e7061faff86070d4'
    elif platform.machine() == 'i686':
        size=1504051200
        cdrom='b20b956b5f65dff3650b3ef4e758a78a2a87152101a04ea1804f993d8e551ceb'
    else:
        sys.exit('Unknown platform {}'.format(platform.machine()))

    output=subprocess.run('dd status=none if=/dev/cdrom count={} | sha256sum'.format(int(size / 512)),
                          shell=True, check=True, universal_newlines=True,
                          stdout=subprocess.PIPE).stdout
    if output != cdrom + "  -\n":
        sys.exit('Bad ubuntu image')

def select_debs():
    if platform.machine() == 'x86_64':
        return DEBS_AMD64
    elif platform.machine() == 'i686':
        return DEBS_X86
    sys.exit('Unknown platform {}'.format(platform.machine()))

def goto_debdir():
    dirs=os.listdir('/media/ubuntu')
    if len(dirs) != 1:
        sys.exit('More than one USB inserted?')
    os.chdir('/media/ubuntu/' + dirs[0])

def check_debs(sums):
    for d in sums.keys():
        output=subprocess.run(['sha256sum', d],
                              universal_newlines=True, check=True,
                              stdout=subprocess.PIPE).stdout
        if output != '{}  {}\n'.format(sums[d], d):
            sys.exit('Bad package {}'.format(d))

def install_debs(debs):
    cmd=['sudo', 'dpkg', '-i']
    cmd.extend(debs)
    subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL)

def stop_bitcoin():
    subprocess.run(['bitcoin-cli', 'stop'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    print("stopping bitcoind")
    
def start_bitcoin():
    subprocess.Popen('bitcoind')

    # Make sure it's started.
    end=time.clock() + 10
    while time.clock() < end:
        if subprocess.run(['bitcoin-cli', 'getinfo'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0:
            return
        time.sleep(0.5)

    # Try stopping, just in case.
    stop_bitcoin()
    raise Exception('Starting bitcoind timed out')

# Helper to run bitcoin-cli
def bitcoin_cli(*args):
    cmd=['bitcoin-cli']
    cmd.extend(args)
    return subprocess.run(cmd,
                          universal_newlines=True,
                          stdout=subprocess.PIPE)

# Helper to run bitcoin-cli, which shouldn't fail.  Returns stdout.
def bitcoin_cli_nofail(*args):
    cmd=['bitcoin-cli']
    cmd.extend(args)
    return subprocess.run(cmd,
                          check=True,
                          universal_newlines=True,
                          stdout=subprocess.PIPE).stdout

# Helper to run bitcoin-cli, which shouldn't fail.  Returns stdout, \n removed.
def bitcoin_cli_simple(*args):
    return bitcoin_cli_nofail(*args).rstrip()

# Helper to parse bitcoin-cli output as JSON.
def json_from_bitcoin_cli(*args):
    return json.loads(bitcoin_cli_nofail(*args))

def new_key():
    print('Generating address', end='...', flush=True)
    time.sleep(1)
    tmpaddr=bitcoin_cli_simple('getnewaddress')
    tmpprivkey=bitcoin_cli_simple('dumpprivkey', tmpaddr)
    print('SUCCESS')

    print('')
    print('Public address: {}'.format(tmpaddr))
    print('Private key (keep secret!): {}'.format(tmpprivkey))
    print('Split in two: {} {}'.format(tmpprivkey[:24],tmpprivkey[24:]))
    print('Split in three: {} {} {}'.format(tmpprivkey[:16],tmpprivkey[16:31],tmpprivkey[31:]))
    print('')

    input('Press Enter')

# See https://en.bitcoin.it/wiki/Proper_Money_Handling_(JSON-RPC)
def bitcoin_to_satoshi(value):
    return int(round(value * 1e8))

def satoshi_to_bitcoin(amount):
    return float(amount / 1e8)

def check_key():
    global addr
    global privkey
    addr=None
    privkey=prefilled_input('Enter your private key (UPPER and lower case matters!): ',
                            privkey)

    # There's no good way to figure out the address, except diff before
    # and after.  Blech!
    before_addresses=set(json_from_bitcoin_cli('getaddressesbyaccount', ''))
    if bitcoin_cli('importprivkey', privkey.replace(" ", "")).returncode == 0:
        print('Key is VALID!')
        after_addresses=set(json_from_bitcoin_cli('getaddressesbyaccount', ''))

        diff=after_addresses - before_addresses
        if len(diff) == 1:
            addr=diff.pop()
            print('Public address is {}'.format(addr))
        elif len(diff) == 0:
            print('Re-import of existing key?  One of:')
            for k in after_addresses:
                print('  ' + k)
            addr=input('Please enter the public key: ')
            if addr not in after_addresses:
                print('{} is not one of those.  Try again'.format(addr))
                addr=None
        else:
            raise Exception('More than one address created from that privkey?')
    else:
        print('Invalid private key (starts with L or K)')

def spend_tx():
    global addr
    global privkey
    global tx
    global vout
    global input_amount
    global fee_rate
    global dest_addr
    global change_addr

    # We assume input was a standard pay to pubkey hash, and fool bitcoind
    # into generating one for us.
    print('Generating public keyscript for {}'.format(addr), end='...', flush=True)
    scriptpubkey = bitcoin_cli_simple('createrawtransaction',
                                      '[{"txid":"' + '0' * 32 + '","vout":0}]',
                                      '{{"{}":0}}'.format(addr))[112:162]
    print('SUCCESS')
    tx=prefilled_input('Enter transaction ID (64 characters) or raw transaction: ',
                       tx)

    if len(tx) == 64:
        # Make sure it's hex!
        try:
            int(tx,16)
        except ValueError:
            print('Bad transaction ID.  Try again')
            return

        txid=tx
        vout=int(prefilled_input('Enter output number which paid to {} (first is 0, second is 1, etc): '.format(addr), vout))
        input_amount=float(prefilled_input('Enter amount it paid (in bitcoins): ', input_amount))
    else:
        decode=bitcoin_cli('decoderawtransaction', tx)
        if decode.returncode != 0:
            print('Decoding transaction FAILED.  Typo?  Try again')
            return

        txjson=json.loads(decode.stdout)
        txid=txjson['txid']

        print('Transaction ID: {}'.format(txid))
        vout=None
        for v in txjson['vout']:
            if v['scriptPubKey']['hex'] == scriptpubkey:
                print('Output {} pays {} to us'.format(v['n'], v['value']))
                if vout is not None:
                    print('More than one output pays to us.  Failing.')
                    return
                vout=v['n']
                input_amount=v['value']

        if vout is None:
            print('No output pays to us.  Failing.')
            return

    input_amount_satoshis=bitcoin_to_satoshi(input_amount)

    fee_rate=int(prefilled_input('Fee per kilobyte (in satoshis, eg 100000): ', fee_rate))
    dest_addr=prefilled_input('Address to send to: ', dest_addr)

    dest_amount=input('Amount to send (hit ENTER to send as much as possible): ')
    if dest_amount != '':
        dest_amount_satoshis=bitcoin_to_satoshi(float(dest_amount))
        change_addr=prefilled_input('Address for change: ', change_addr)

        # Tx with two outputs is about 225 bytes.
        fee_satoshis=int(fee_rate * 225 / 1000)
        change_amount_satoshis=input_amount_satoshis - dest_amount_satoshis - fee_satoshis

        # Sanity check for tiny or negative change (or weird fee).
        if change_amount_satoshis < fee_satoshis:
            print("Change amount {:.8f} too small (fee is {:.8f})".format(satoshi_to_bitcoin(change_amount_satoshis), satoshi_to_bitcoin(fee_satoshis)))
            return
    else:
        # Tx with one output is about 192 bytes.
        fee_satoshis=int(fee_rate * 192 / 1000)
        dest_amount_satoshis=input_amount_satoshis - fee_satoshis
        change_addr=None

    # Sanity check fee.
    if fee_satoshis > input_amount_satoshis:
        print('Fee {:.8f} is greater than input amount {:.8f}'
              .format(satoshi_to_bitcoin(fee_satoshis),
                      satoshi_to_bitcoin(input_amount_satoshis)))
        return

    if change_addr is None:
        changestr=''
    else:
        changestr=' (change to {})'.format(change_addr)

    print('')
    print('Spending {:.8f} to send {:.8f} to {}{}'.format(satoshi_to_bitcoin(input_amount_satoshis), satoshi_to_bitcoin(dest_amount_satoshis), dest_addr, changestr))

    print('Paying miners a fee of {:.8f} bitcoins ({:5f}%)'.format(satoshi_to_bitcoin(fee_satoshis), fee_satoshis * 100 / dest_amount_satoshis))

    if fee_satoshis > bitcoin_to_satoshi(0.001):
        print('WARNING: Fee of {} bitcoins seems really large.'
              .format(satoshi_to_bitcoin(fee_satoshis)))
        print('This fee goes straight to the miners.')
        # Simply refuse to pay more than 5% fee ever.
        if fee_satoshis * 20 >= dest_amount_satoshis:
            print('Refusing to let you do that.  Sorry.')
            return

    # Create transaction.
    print('Creating raw transaction', end='...', flush=True)
    if change_addr is not None:
        # Random order of dest, change
        if os.urandom(1)[0] >= 128:
            outputs='{{"{}":{},"{}":{}}}'.format(dest_addr, satoshi_to_bitcoin(dest_amount_satoshis), change_addr, satoshi_to_bitcoin(change_amount_satoshis))
            our_output=1
        else:
            outputs='{{"{}":{},"{}":{}}}'.format(change_addr, satoshi_to_bitcoin(change_amount_satoshis), dest_addr, satoshi_to_bitcoin(dest_amount_satoshis))
            our_output=0
    else:
        outputs='{{"{}":{}}}'.format(dest_addr, satoshi_to_bitcoin(dest_amount_satoshis))

    raw_tx=bitcoin_cli('createrawtransaction',
                       '[{{"txid":"{}","vout":{}}}]'.format(txid, vout),
                       outputs)
    if raw_tx.returncode != 0:
        print('FAILED.')
        print('Malformed transaction or addresses?  Try again.')
        return

    print('SUCCESS')

    print('Signing raw transaction', end='...', flush=True)
    signed_tx=json_from_bitcoin_cli('signrawtransaction', raw_tx.stdout.rstrip(),
                                    '[{{"txid":"{}","vout":{},"scriptPubKey":"{}"}}]'.format(txid, vout, scriptpubkey))
    print('SUCCESS')

    if change_addr is not None:
        output_txid=json_from_bitcoin_cli('decoderawtransaction', raw_tx.stdout.rstrip())['txid']
        print("Transaction (change) to spend next time: {} output #{} amount {}"
              .format(output_txid, our_output, satoshi_to_bitcoin(change_amount_satoshis)))
        
    print('Payment to broadcast: {}'.format(signed_tx['hex']))

    input('Press Enter to show qrcode')
    subprocess.run(['qrencode', '-i', '-t', 'UTF8', signed_tx['hex']])

# Because sys.tracebacklimit=0 doesn't work in python3. From
# http://stackoverflow.com/questions/27674602/hide-traceback-unless-a-debug-flag-is-set    
def exceptionHandler(exception_type, exception, traceback):
    print('{}: {}'.format(exception_type.__name__, exception))

parser = argparse.ArgumentParser(description='Offline bitcoin helper script')
parser.add_argument('--verbose', action='store_true', help='Verbose debug mode')
args=parser.parse_args()

# No tracebacks for normal users please.
if args.verbose is False:
    sys.excepthook = exceptionHandler

# These are globals.  Typos are common, so we use previous answers to
# pre-populate input fields.
addr=None
privkey=None
tx=None
vout=None
input_amount=None
fee_rate=None
dest_addr=None
change_addr=None

print("Rusty's Remarkable Unreliable Bitcoin Storage Script")
print('----------------------------------------------------');
goto_debdir()
print('Checking bitcoin and friends', end='...', flush=True)
sums=select_debs()
check_debs(sums)
print('OK')
print('Installing bitcoin and friends', end='...', flush=True)
install_debs(sums.keys())
print('OK')

print('Starting bitcoin', end='...', flush=True)
start_bitcoin()
print('OK')

try:
    while True:
        print('')
        print('create - Create a new private key and public address.')
        print('restore - Restore a private key and check it is valid.')
        if addr is not None:
            print('spend - spend a transaction with a private key.')
        print('(To quit, just power off the entire machine)')
        choice=input('What do you want to do? ')
        if choice == 'create':
            new_key()
        elif choice == 'restore':
            check_key()
        elif choice == 'spend':
            if addr is None:
                print("Use 'restore' to enter the private key first")
            else:
                spend_tx()
        else:
            print("I don't understand '{}'".format(choice))
finally:
    stop_bitcoin()
    sys.exit(1)
